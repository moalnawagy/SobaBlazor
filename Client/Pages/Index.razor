@page "/"

<PageTitle>MQQT</PageTitle>
@* *@
@* @using SobaBlazor.Client.Data *@
@* @using MQTTnet *@
@* @using MQTTnet.Client.Connecting *@
@* @using MQTTnet.Client.Disconnecting *@
@* @using MQTTnet.Client.Options *@
@* @using MQTTnet.Client.Receiving *@
@* @using MQTTnet.Client.Subscribing *@
@* @using MQTTnet.Extensions.ManagedClient *@
@* @using System.Text *@
@* @using Newtonsoft.Json *@
@* *@
@* <h1>MQTT - WebManager</h1> *@
@* *@
@* <EditForm Model="@managerModel" OnValidSubmit="@HandleValidSubmit"> *@
@* *@
@*     <div class="instrument"> *@
@* *@
@*         <div class="outerdiv"> *@
@*             <div class="innerdiv" style="transform: @RollDraw; background: linear-gradient(#9ff, #9ff @PitchDraw, #7f5a3d @PitchDraw, #7f5a3d)"> *@
@*             </div> *@
@*             <div class="linediv">&nbsp;</div> *@
@*             <div class="textdiv"> *@
@*                 Roll: @Roll&deg;<br /> *@
@*                 Pitch: @Pitch&deg; *@
@*             </div> *@
@*         </div> *@
@* *@
@*         <div class="threshold" @onclick="SetThreshold" style="color: @(All?"gray": "yellow"); border-color: @(All?"gray": "yellow");"> *@
@*             <b>Threshold</b><br /> *@
@*             <label>Min angle</label> *@
@*             <input type="number" id="min" @bind="MinAngle" style="width:6ch; margin-left:4px; background-color: @(All?"gray": "yellow")" /> *@
@*             <br /> *@
@*             <label>Max angle</label> *@
@*             <input type="number" id="min" @bind="MaxAngle" style="width:6ch; background-color: @(All?"gray": "yellow")" /> *@
@*         </div> *@
@* *@
@*         <div class="change" @onclick="SetChange" style="color: @(!All?"gray": "yellow");border-color: @(!All?"gray": "yellow");"> *@
@*             <b>Change</b><br /> *@
@*             Angle <input type="number" id="change" @bind="Change" style="width:6ch; background-color: @(!All?"gray": "yellow")"> *@
@*         </div> *@
@* *@
@*           <div class="change"  style="color: green;"> *@
@*             <b>Recived messages</b><br /> *@
@*             <h2>@Messages</h2> *@
@*         </div> *@
@*     </div> *@
@* </EditForm> *@
@* *@
@* @if (managerModel == null) *@
@* { *@
@*     <p><em>Loading...</em></p> *@
@* } *@
@* else *@
@* { *@
@*     <table class="table"> *@
@*         <thead> *@
@*             <tr> *@
@*                 <th>Number</th> *@
@*                 <th>Date</th> *@
@*                 <th>Sensor</th> *@
@*                 <th>Roll</th> *@
@*                 <th>Pitch</th> *@
@*             </tr> *@
@*         </thead> *@
@*         <tbody> *@
@*             @foreach (var m in managerModel.mqttData) *@
@*             { *@
@*                 <tr> *@
@*                     <td>@m.MessageNumber</td> *@
@*                     <td>@m.Date</td> *@
@*                     <td>@m.Sensor</td> *@
@*                     <td>@m.Roll</td> *@
@*                     <td>@m.Pitch</td> *@
@*                 </tr> *@
@*             } *@
@*         </tbody> *@
@*     </table> *@
@* } *@
@* *@
@* @code { *@
@* *@
@*     protected string RollDraw => "rotate(" + Roll + "deg)"; *@
@*     protected int Roll { get; set; } = 0; *@
@* *@
@*     protected string PitchDraw => (Pitch + 50) + "%"; *@
@*     protected int Pitch { get; set; } = 0; *@
@*     protected ManagerModel managerModel = new(); *@
@*     protected IManagedMqttClient _mqttClient; *@
@* *@
@*     int _changeAngle = 4; *@
@*     [Parameter] *@
@*     public int Change *@
@*     { *@
@*         get => _changeAngle; *@
@*         set *@
@*         { *@
@*             _changeAngle = value; *@
@*             SetChangeAngle(); *@
@*         } *@
@*     } *@
@* *@
@*     int _minAngle = -33; *@
@*     [Parameter] *@
@*     public int MinAngle *@
@*     { *@
@*         get => _minAngle; *@
@*         set *@
@*         { *@
@*             _minAngle = value; *@
@*             SetMinAngle(); *@
@*         } *@
@*     } *@
@* *@
@*     int _maxAngle = 33; *@
@*     [Parameter] *@
@*     public int MaxAngle *@
@*     { *@
@*         get => _maxAngle; *@
@*         set *@
@*         { *@
@*             _maxAngle = value; *@
@*             SetMaxAngle(); *@
@*         } *@
@*     } *@
@* *@
@*     [Parameter] *@
@*     public int Messages { get; set; } = 0; *@
@* *@
@*     [Parameter] *@
@*     public bool All { get; set; } = false; *@
@* *@
@*     protected override async Task OnInitializedAsync() *@
@*     { *@
@*         var start = new MQTTData() *@
@*             { *@
@*                 Roll = Roll, *@
@*                 Pitch = Pitch, *@
@*                 Sensor = "LIS2HH12", *@
@*                 Date = DateTime.Now *@
@*             }; *@
@*         managerModel.mqttData.Add(start); *@
@* *@
@*         MqttClientOptionsBuilder builder = new MqttClientOptionsBuilder() *@
@*                                     .WithClientId("WebManager") *@
@*                                     .WithTcpServer("127.0.0.1", 1883); *@
@* *@
@*         ManagedMqttClientOptions options = new ManagedMqttClientOptionsBuilder() *@
@*                          .WithAutoReconnectDelay(TimeSpan.FromSeconds(10)) *@
@*                          .WithClientOptions(builder.Build()) *@
@*                          .Build(); *@
@* *@
@*         _mqttClient = new MqttFactory().CreateManagedMqttClient(); *@
@* *@
@*         _mqttClient.ConnectedHandler = new MqttClientConnectedHandlerDelegate(OnConnected); *@
@*         _mqttClient.DisconnectedHandler = new MqttClientDisconnectedHandlerDelegate(OnDisconnected); *@
@*         _mqttClient.ConnectingFailedHandler = new ConnectingFailedHandlerDelegate(OnConnectingFailed); *@
@* *@
@*         _mqttClient.ApplicationMessageReceivedHandler = new MqttApplicationMessageReceivedHandlerDelegate(a => *@
@*         { *@
@*             if (a.ApplicationMessage.Topic == "esp/bme680/temperature") *@
@*             { *@
@*                 var payload = Encoding.UTF8.GetString(a.ApplicationMessage.Payload); *@
@* *@
@*                 if (payload.Contains("ROLL_ALL")) *@
@*                 { *@
@*                     if (int.TryParse(payload.Split(" ")[1].Split(".")[0], out int allset)) *@
@*                     { *@
@*                         All = false; *@
@*                         if (allset == 1) *@
@*                             All = true; *@
@*                         this.InvokeAsync(() => this.StateHasChanged()); *@
@*                     } *@
@* *@
@* *@
@*                 } *@
@*                 else *@
@*                 { *@
@*                     var payloadarray = payload.Split(":"); *@
@*                     if (int.TryParse(payloadarray[0].Split(".")[0], out int roll)) *@
@*                     { *@
@*                         Roll = roll; *@
@* *@
@*                         int pitch = 0; *@
@*                         if (payloadarray.Length > 1) *@
@*                             if (int.TryParse(payloadarray[1].Split(".")[0], out pitch)) *@
@*                             { *@
@*                                 Pitch = pitch; *@
@*                             } *@
@*                         Messages++; *@
@*                         var ny = new MQTTData() *@
@*                             { *@
@*                                 Roll = roll, *@
@*                                 Pitch = pitch, *@
@*                                 Sensor = "LIS2HH12", *@
@*                                 Date = DateTime.Now, *@
@*                                 MessageNumber = Messages *@
@*                             }; *@
@* *@
@*                         Console.WriteLine("Roll:" + roll + ", Pitch:" + pitch); *@
@*                         if (roll < 0) *@
@*                             SendColor("green"); *@
@*                         else *@
@*                             SendColor("red"); *@
@* *@
@*                         managerModel.mqttData.Add(ny); *@
@* *@
@*                         this.InvokeAsync(() => this.StateHasChanged()); *@
@*                     } *@
@*                     else *@
@*                         SendColor("off"); *@
@*                 } *@
@*             } *@
@*         }); *@
@* *@
@*         string[] strTopics = { "esp/bme680/temperature" }; *@
@* *@
@*         MqttClientSubscribeOptions objSubOptions = new MqttClientSubscribeOptions(); *@
@*         List<MqttTopicFilter> objTopics = new List<MqttTopicFilter>(); *@
@* *@
@*         foreach (string strTopic in strTopics) *@
@*         { *@
@*             MqttTopicFilter objAdd = new MqttTopicFilter(); *@
@*             objAdd.Topic = strTopic; *@
@*             objTopics.Add(objAdd); *@
@*         } *@
@* *@
@*         _mqttClient.StartAsync(options).GetAwaiter().GetResult(); *@
@*         await _mqttClient.SubscribeAsync(objTopics); *@
@* *@
@*         GetStatus(); *@
@* *@
@*         SendColor("yellow"); *@
@*         SetChangeAngle(); *@
@*         SetMinAngle(); *@
@*         SetMaxAngle(); *@
@*         //_mqttClient.PublishAsync("topic_command", "yellow"); *@
@*         //Console.WriteLine($"+ Sent topic_command: yellow"); *@
@* *@
@*         //Console.Write("Ange vilkel: "); *@
@*         //var vink = Console.ReadLine(); *@
@*         //string json = JsonConvert.SerializeObject(new { vinkel = vink }); *@
@*         //_mqttClient.PublishAsync("topic_command", json); *@
@*         //while (true) *@
@*         //{ *@
@*         //    //string json = JsonConvert.SerializeObject(new { message = "Heyo :)", sent= DateTimeOffset.UtcNow }); *@
@*         //    //_mqttClient.PublishAsync("from_py", json); *@
@*         //    ////dev.to / topic / json *@
@*         //    //Console.WriteLine($"+ Sent message: {json}"); *@
@*         //    Task.Delay(1000).GetAwaiter().GetResult(); *@
@*         //} *@
@*     } *@
@* *@
@*     private void HandleValidSubmit() *@
@*     { *@
@*     } *@
@* *@
@*     private void SetMinAngle() *@
@*     { *@
@*         SendCommand("ROLL", "MIN", _minAngle); *@
@*     } *@
@*     private void SetMaxAngle() *@
@*     { *@
@*         SendCommand("ROLL", "MAX", _maxAngle); *@
@*     } *@
@* *@
@*     private void SetChangeAngle() *@
@*     { *@
@*         SendCommand("ROLL", "CHG", _changeAngle); *@
@*     } *@
@* *@
@*     private void ToggleAll() *@
@*     { *@
@*         All = !All; *@
@*         SendCommand("ROLL", "ALL", All ? 1 : 0); *@
@*     } *@
@* *@
@*     private void SetThreshold() *@
@*     { *@
@*         All = false; *@
@*         SendCommand("ROLL", "ALL", 0); *@
@*         Thread.Sleep(100); *@
@*         SetMinAngle(); *@
@*         Thread.Sleep(100); *@
@*         SetMaxAngle(); *@
@*     } *@
@* *@
@*     private void SetChange() *@
@*     { *@
@*         All = true; *@
@*         SendCommand("ROLL", "ALL", 1); *@
@*         Thread.Sleep(100); *@
@*         SetChangeAngle(); *@
@*     } *@
@* *@
@*     private void GetStatus() *@
@*     { *@
@*         SendCommand("ROLL", "GetValues"); *@
@*     } *@
@* *@
@*     private void SendCommand(string sensor, string setting, int value = 0) *@
@*     { *@
@* *@
@*         string json = JsonConvert.SerializeObject(new { sensor = sensor, setting = setting, value = value }); *@
@*         _mqttClient.PublishAsync("topic_command", json); *@
@*     } *@
@* *@
@*     private void SendColor(string color) *@
@*     { *@
@*         _mqttClient.PublishAsync("topic_command", color); *@
@*     } *@
@* *@
@*     public void OnConnected(MqttClientConnectedEventArgs obj) *@
@*     { *@
@*         Console.WriteLine("Successfully connected."); *@
@*     } *@
@* *@
@*     public void OnConnectingFailed(ManagedProcessFailedEventArgs obj) *@
@*     { *@
@*         Console.WriteLine(obj.Exception); *@
@*         Console.WriteLine("Couldn't connect to broker."); *@
@*     } *@
@* *@
@*     public void OnDisconnected(MqttClientDisconnectedEventArgs obj) *@
@*     { *@
@*         Console.WriteLine(obj.Reason); *@
@*         Console.WriteLine(obj.ClientWasConnected); *@
@*         Console.WriteLine("Successfully disconnected."); *@
@*     } *@
@* *@
@* *@
@*     public class ManagerModel *@
@*     { *@
@*         public List<MQTTData> mqttData = new List<MQTTData>(); *@
@* *@
@* *@
@*     } *@
@* } *@


@using SobaBlazor.Client.JsInterop

@inject MqttJsInterop mqttInterop

<div class="container">
    <div class="row mx-lg-n5">
        <div class="col py-3 px-lg-5 border bg-light">
            Enter your name: <input type="text" disabled="@(IsDisabled)" @bind="@Name" />
        </div>
    </div>
    <div class="row mx-lg-n5">
        <div class="col py-3 px-lg-5">
            <button class="btn btn-primary btn-sm" @onclick="@CreateClientAndConnect" disabled="@(IsDisabled)">Connect</button>
            <button class="btn btn-danger btn-sm" @onclick="@Disconnect" disabled="@(!IsDisabled)">Disconnect</button>
        </div>
    </div>
    <div class="row mx-lg-n5">
        <div class="col py-3 px-lg-5">
            <p>Connection Status: <strong>@ConnectionStatus</strong></p>
        </div>
    </div>
    <div class="input-group mb-3">
        <input type="text" class="form-control" placeholder="Type your message here" @bind="@Message" disabled="@(!IsDisabled)" />
        <div class="input-group-append">
            <button class="btn btn-outline-secondary" type="button" @onclick="@PublishMessage" disabled="@(!IsDisabled)">Send</button>
        </div>
    </div>
    <div class="row">
        @if (rabbitData == null && rabbitData?.Count != 0)
        {
            <p><em>Awaiting data...</em></p>
        }
        else
        {
            <table class="table">
                <tbody>
                    @foreach (var data in rabbitData)
                    {
                        <tr>
                            <td width="100px">@data.Received</td>
                            <td>@data.Data</td>
                        </tr>
                    }
                </tbody>
            </table>
        }
    </div>
</div>

@code {

    private const string _rabbitMQHost = "localhost";
    private const int _rabbitMQPort = 5072;

    private const string _rabbitMQUsername = "guest";
    private const string _rabbitMQPassword = "guest";
    private const string _topic = "chatroom";

    private List<PayloadData> rabbitData { get; set; }
    protected string ConnectionStatus { get; set; }
    protected string Name { get; set; } = $"User1";
    protected bool IsDisabled { get; set; }
    protected string Message { get; set; }

    protected override void OnInitialized()
    {
        ConnectionStatus = "Not connected";

        JsInterop.OnConnectionChanged.Action = value =>
        {
            ConnectionStatus = $"{value}";
            this.StateHasChanged();
        };


        JsInterop.OnMessageReceived.Action = (key, data) =>
        {
            if (rabbitData == null)
            {
                rabbitData = new List<PayloadData>();
            }

            var rabbitDataItem = new PayloadData(key, data);
            rabbitData.Insert(0, rabbitDataItem);

            this.StateHasChanged();
        };
    }

    public void CreateClientAndConnect()
    {
        IsDisabled = true;
        this.StateHasChanged();

        mqttInterop.CreateClient(wsHost: _rabbitMQHost, wsPort: _rabbitMQPort, clientId: Name);
        mqttInterop.Connect(topic: _topic, qos: 1, timeout: 3, username: _rabbitMQUsername, password: _rabbitMQPassword);
    }

    public void Disconnect()
    {
        mqttInterop.Disconnect();
        IsDisabled = false;
        this.StateHasChanged();
    }

    public void PublishMessage()
    {
        if (!string.IsNullOrWhiteSpace(Message))
        {
            string payload = $"{Name} : {Message}";
            mqttInterop.Publish(topic: _topic, payload: payload, qos: 0, retained: false);
            Message = null;
            this.StateHasChanged();
        }
    }

    class PayloadData
    {
        public string Key { get; set; }
        public string Data { get; set; }
        public string Received { get; set; }

        public PayloadData(string key, string data)
        {
            this.Key = key;
            this.Data = data;
            this.Received = DateTime.Now.ToString("HH:mm:ss");
        }
    }
}
